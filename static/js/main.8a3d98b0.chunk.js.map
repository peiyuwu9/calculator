{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","clickNumberHandler","e","state","operatorNotSelected","isCalculated","setState","firstNumber","target","value","operator","secondNumber","result","parseInt","console","log","clickOperatorHandler","calculateResult","toString","clearUp","numbers","operators","className","type","this","readOnly","map","num","index","key","onClick","opt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a3d98b0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n    this.operators = [\"+\", \"-\", \"x\", \"/\"];\n\n    this.state = {\n      firstNumber: \"\",\n      operator: \"\",\n      secondNumber: \"\",\n      result: 0,\n      operatorNotSelected: true,\n      isCalculated: false,\n    };\n  }\n\n  clickNumberHandler = (e) => {\n    this.state.operatorNotSelected\n      ? this.state.isCalculated\n        ? this.setState(\n            {\n              firstNumber: e.target.value,\n              operator: \"\",\n              secondNumber: \"\",\n              result: parseInt(e.target.value),\n              operatorNotSelected: true,\n              isCalculated: false,\n            },\n            () => {\n              console.log(`First number: ${this.state.firstNumber}`);\n            }\n          )\n        : this.setState(\n            {\n              firstNumber: this.state.firstNumber + e.target.value,\n              result: parseInt(this.state.firstNumber + e.target.value),\n            },\n            () => {\n              console.log(`First number: ${this.state.firstNumber}`);\n            }\n          )\n      : this.setState(\n          {\n            secondNumber: this.state.secondNumber + e.target.value,\n            result: parseInt(this.state.secondNumber + e.target.value),\n          },\n          () => {\n            console.log(`Second number: ${this.state.secondNumber}`);\n          }\n        );\n  };\n\n  clickOperatorHandler = (e) => {\n    this.setState(\n      {\n        operator: e.target.value,\n        operatorNotSelected: false,\n      },\n      () => {\n        console.log(`Operator: ${this.state.operator}`);\n      }\n    );\n  };\n\n  calculateResult = () => {\n    switch (this.state.operator) {\n      case \"+\":\n        this.setState(\n          {\n            result:\n              parseInt(this.state.firstNumber) +\n              parseInt(this.state.secondNumber),\n            isCalculated: true,\n          },\n          () => {\n            console.log(this.state);\n            this.setState({\n              firstNumber: this.state.result.toString(),\n              operator: \"\",\n              secondNumber: \"\",\n              operatorNotSelected: true,\n            });\n          }\n        );\n        break;\n\n      case \"-\":\n        this.setState(\n          {\n            result:\n              parseInt(this.state.firstNumber) -\n              parseInt(this.state.secondNumber),\n            isCalculated: true,\n          },\n          () => {\n            console.log(this.state);\n            this.setState({\n              firstNumber: this.state.result.toString(),\n              operator: \"\",\n              secondNumber: \"\",\n              operatorNotSelected: true,\n            });\n          }\n        );\n        break;\n\n      case \"x\":\n        this.setState(\n          {\n            result:\n              parseInt(this.state.firstNumber) *\n              parseInt(this.state.secondNumber),\n            isCalculated: true,\n          },\n          () => {\n            console.log(this.state);\n            this.setState({\n              firstNumber: this.state.result.toString(),\n              operator: \"\",\n              secondNumber: \"\",\n              operatorNotSelected: true,\n            });\n          }\n        );\n        break;\n\n      case \"/\":\n        this.setState(\n          {\n            result:\n              parseInt(this.state.firstNumber) /\n              parseInt(this.state.secondNumber),\n            isCalculated: true,\n          },\n          () => {\n            console.log(this.state);\n            this.setState({\n              firstNumber: this.state.result.toString(),\n              operator: \"\",\n              secondNumber: \"\",\n              operatorNotSelected: true,\n            });\n          }\n        );\n        break;\n    }\n  };\n\n  //   backUp = () => {\n  //     this.state.operatorNotSelected\n  //       ? this.setState({\n  //           firstNumber: this.state.firstNumber,\n  //         })\n  //       : this.setState({\n  //           secondNumber: this.state.secondNumber,\n  //         });\n  //   };\n\n  clearUp = () => {\n    this.setState({\n      firstNumber: \"\",\n      operator: \"\",\n      secondNumber: \"\",\n      result: 0,\n      operatorNotSelected: true,\n      isCalculated: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className={\"grid-container\"}>\n        <input\n          type=\"text\"\n          className={`grid-item-0 display`}\n          value={this.state.result}\n          readOnly\n        />\n        {this.numbers.map((num, index) => (\n          <button\n            key={index}\n            value={num}\n            className={`grid-item-${index + 1} numbers`}\n            onClick={this.clickNumberHandler}\n          >\n            {num}\n          </button>\n        ))}\n        {this.operators.map((opt, index) => (\n          <button\n            key={index + 10}\n            value={opt}\n            className={`grid-item-${index + 11} operators`}\n            onClick={this.clickOperatorHandler}\n          >\n            {opt}\n          </button>\n        ))}\n        <button\n          value=\"=\"\n          className={`grid-item-15 functions`}\n          onClick={this.calculateResult}\n        >\n          =\n        </button>\n        {/* <button className={`grid-item-16 functions`} onClick={this.backUp}>\n            Back\n          </button> */}\n        <button className={`grid-item-16 functions`} onClick={this.clearUp}>\n          C\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Calculator</h1>\n      </header>\n      <main className=\"body\">\n        <Calculator />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}